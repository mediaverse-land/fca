# name: Build APK/AAB MediaVerse

# on:
#   repository_dispatch:
#     types: [build_apk, build_aab]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3

#       # Cache Flutter SDK
#       - name: Cache Flutter SDK
#         uses: actions/cache@v3
#         with:
#           path: ~/.flutter
#           key: flutter-sdk-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
#           restore-keys: |
#             flutter-sdk-${{ runner.os }}-

#       # Setup Flutter environment
#       - name: Setup Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           channel: 'stable'
#           flutter-version: 3.22.0

#       # Cache Android SDK
#       - name: Cache Android SDK
#         uses: actions/cache@v3
#         with:
#           path: ~/.android
#           key: android-sdk-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
#           restore-keys: |
#             android-sdk-${{ runner.os }}-

#       # Setup Android SDK
#       - name: Setup Android SDK
#         uses: android-actions/setup-android@v2
#         with:
#           api-level: 34
#           target: default
#           arch: x86_64
#           ndk: true

#       # Cache Gradle
#       - name: Cache Gradle
#         uses: actions/cache@v3
#         with:
#           path: ~/.gradle
#           key: gradle-${{ runner.os }}-${{ hashFiles('android/build.gradle') }}
#           restore-keys: |
#             gradle-${{ runner.os }}-

#       # Cache Flutter build files
#       - name: Cache Flutter build files
#         uses: actions/cache@v3
#         with:
#           path: build/
#           key: flutter-build-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
#           restore-keys: |
#             flutter-build-${{ runner.os }}-

#       # Cache Flutter pub dependencies
#       - name: Cache Flutter pub dependencies
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.pub-cache
#             pubspec.lock
#           key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
#           restore-keys: |
#             pub-cache-${{ runner.os }}-

#       # Install Android build-tools including zipalign
#       - name: Install Android build-tools
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y android-sdk build-essential
#           sdkmanager "build-tools;30.0.3"

#       # Get dependencies (skip cleaning cache to reuse cached files)
#       - name: Get dependencies
#         run: flutter pub get

#       # Build based on event type (APK or AAB)
#       - name: Build APK or AAB
#         run: |
#           if [ "${{ github.event.action }}" == "build_apk" ]; then
#             flutter build apk --release --split-per-abi
#           elif [ "${{ github.event.action }}" == "build_aab" ]; then
#             flutter build appbundle --release
#           fi

#       # Decode keystore
#       - name: Decode keystore
#         env:
#           KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
#         run: |
#           echo "$KEYSTORE_FILE_BASE64" | base64 --decode > android/app/keystore.jks

#       # Sign APK or AAB
#       - name: Sign APK or AAB
#         env:
#           KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
#           KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
#           KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
#         run: |
#           if [ "${{ github.event.action }}" == "build_apk" ]; then
#             for APK in build/app/outputs/apk/release/*.apk; do
#               jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" "$APK" "$KEY_ALIAS"
#             done
#           elif [ "${{ github.event.action }}" == "build_aab" ]; then
#             jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" build/app/outputs/bundle/release/app-release.aab "$KEY_ALIAS"
#           fi

#       # Align APK
#       - name: Zipalign APK (if APK is built)
#         if: github.event.action == 'build_apk'
#         run: |
#           for APK in build/app/outputs/apk/release/*.apk; do
#             zipalign -v 4 "$APK" "$APK-aligned.apk"
#             mv "$APK-aligned.apk" "$APK"
#           done

#       # Send APK or AAB to Telegram
#       - name: Send APK or AAB to Telegram
#         env:
#           TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
#         run: |
#           CHAT_ID=${{ github.event.client_payload.chat_id }}  
          
#           if [ "${{ github.event.action }}" == "build_apk" ]; then
#             for APK in build/app/outputs/apk/release/*.apk; do
#               curl -F chat_id=$CHAT_ID -F document=@"$APK" -F caption="MediaVerse APK" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument
#             done
#           elif [ "${{ github.event.action }}" == "build_aab" ]; then
#             curl -F chat_id=$CHAT_ID -F document=@"build/app/outputs/bundle/release/app-release.aab" -F caption="MediaVerse AAB" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument
#           fi
name: Build APK/AAB MediaVerse

on:
  repository_dispatch:
    types: [build_apk, build_aab]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Notify Telegram about the start of the process
      - name: Notify Telegram - Build Starting
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Build process started for MediaVerse."

      # Cache Flutter SDK
      - name: Notify Telegram - Caching Flutter SDK
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Caching Flutter SDK in progress."

      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: flutter-sdk-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            flutter-sdk-${{ runner.os }}-

      # Setup Flutter environment
      - name: Notify Telegram - Setting up Flutter Environment
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Setting up Flutter environment."

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.22.0

      # Cache Android SDK
      - name: Notify Telegram - Caching Android SDK
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Caching Android SDK in progress."

      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: ~/.android
          key: android-sdk-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      # Setup Android SDK
      - name: Notify Telegram - Setting up Android SDK
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Setting up Android SDK."

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 34
          target: default
          arch: x86_64
          ndk: true

      # Cache Gradle
      - name: Notify Telegram - Caching Gradle
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Caching Gradle dependencies."

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('android/build.gradle') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Cache Flutter build files
      - name: Notify Telegram - Caching Flutter build files
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Caching Flutter build files."

      - name: Cache Flutter build files
        uses: actions/cache@v3
        with:
          path: build/
          key: flutter-build-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            flutter-build-${{ runner.os }}-

      # Cache Flutter pub dependencies
      - name: Notify Telegram - Caching Flutter pub dependencies
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Caching Flutter pub dependencies."

      - name: Cache Flutter pub dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            pubspec.lock
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      # Install Android build-tools including zipalign
      - name: Notify Telegram - Installing Android build-tools
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Installing Android build-tools."

      - name: Install Android build-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y android-sdk build-essential
          sdkmanager "build-tools;30.0.3"

      # Get dependencies (skip cleaning cache to reuse cached files)
      - name: Notify Telegram - Getting dependencies
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Getting Flutter project dependencies."

      - name: Get dependencies
        run: flutter pub get

      # Build based on event type (APK or AAB)
      - name: Notify Telegram - Starting APK/AAB Build
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Starting ${GITHUB_EVENT_NAME} build process."

      - name: Build APK or AAB
        run: |
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            flutter build apk --release --split-per-abi
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            flutter build appbundle --release
          fi

      # Decode keystore
      - name: Notify Telegram - Decoding keystore
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Decoding keystore."

      - name: Decode keystore
        env:
          KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        run: |
          echo "$KEYSTORE_FILE_BASE64" | base64 --decode > android/app/keystore.jks

      # Sign APK or AAB
      - name: Notify Telegram - Signing APK or AAB
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Signing APK or AAB."

      - name: Sign APK or AAB
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            for APK in build/app/outputs/apk/release/*.apk; do
              jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" "$APK" "$KEY_ALIAS"
            done
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" build/app/outputs/bundle/release/app-release.aab "$KEY_ALIAS"
          fi

      # Align APK
      - name: Notify Telegram - Zipaligning APK
        if: github.event.action == 'build_apk'
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Aligning APK."

      - name: Zipalign APK (if APK is built)
        if: github.event.action == 'build_apk'
        run: |
          for APK in build/app/outputs/apk/release/*.apk; do
            zipalign -v -p 4 "$APK" "${APK%.apk}-aligned.apk"
          done

      # Notify Telegram that the build is complete
      - name: Notify Telegram - Build Complete
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d text="Build complete. APK/AAB has been generated successfully."
