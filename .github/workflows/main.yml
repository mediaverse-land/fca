name: Build APK/AAB MediaVerse

on:
  repository_dispatch:
    types: [build_apk, build_aab]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      FLUTTER_HOME: $HOME/flutter
      ANDROID_SDK_ROOT: $HOME/Android/Sdk

    steps:
      - uses: actions/checkout@v3

      # کش Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ${{ env.FLUTTER_HOME }}
          key: flutter-sdk-${{ runner.os }}-v3.22.0
          restore-keys: |
            flutter-sdk-${{ runner.os }}-

      # کش Android SDK
      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROID_SDK_ROOT }}
          key: android-sdk-${{ runner.os }}-api34
          restore-keys: |
            android-sdk-${{ runner.os }}-

      # کش Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-v7.5.1
          restore-keys: |
            gradle-${{ runner.os }}-

      # کش وابستگی‌های Flutter (Pub)
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      # کش Android build-tools
      - name: Cache Android build-tools
        uses: actions/cache@v3
        with:
          path: ${{ env.ANDROID_SDK_ROOT }}/build-tools
          key: android-build-tools-${{ runner.os }}-30.0.3
          restore-keys: |
            android-build-tools-${{ runner.os }}-

      # تنظیم محیط Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.22.0

      # تنظیم Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 34
      - name: Install Android cmdline-tools
        run: |
          sudo mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip
          unzip sdk-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools


      # نصب ابزارهای ساخت Android شامل zipalign
      - name: Install Android build-tools (if cache is missing)
        if: steps.cache-build-tools.outputs.cache-hit != 'true'
        run: |
          sdkmanager "build-tools;30.0.3"

      # دریافت وابستگی‌ها
      - name: Get dependencies
        run: flutter pub get

      # ساخت APK یا AAB بر اساس نوع رویداد
      - name: Build APK or AAB
        run: |
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            flutter build apk --release --split-per-abi
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            flutter build appbundle --release
          fi

      # رمزگشایی keystore
      - name: Decode keystore
        env:
          KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        run: |
          echo "$KEYSTORE_FILE_BASE64" | base64 --decode > android/app/keystore.jks

      # امضای APK یا AAB
      - name: Sign APK or AAB
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            for APK in build/app/outputs/apk/release/*.apk; do
              jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" "$APK" "$KEY_ALIAS"
            done
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" build/app/outputs/bundle/release/app-release.aab "$KEY_ALIAS"
          fi

      # هماهنگ‌سازی APK
      - name: Zipalign APK (if APK is built)
        if: github.event.action == 'build_apk'
        run: |
          for APK in build/app/outputs/apk/release/*.apk; do
            zipalign -v 4 "$APK" "$APK-aligned.apk"
            mv "$APK-aligned.apk" "$APK"
          done

      # ارسال APK یا AAB به تلگرام
      - name: Send APK or AAB to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: |
          CHAT_ID=${{ github.event.client_payload.chat_id }}  
          
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            for APK in build/app/outputs/apk/release/*.apk; do
              curl -F chat_id=$CHAT_ID -F document=@"$APK" -F caption="MediaVerse APK" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument
            done
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            curl -F chat_id=$CHAT_ID -F document=@"build/app/outputs/bundle/release/app-release.aab" -F caption="MediaVerse AAB" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument
          fi
