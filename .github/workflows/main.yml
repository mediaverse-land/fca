name: Build APK/AAB MediaVerse

on:
  repository_dispatch:
    types: [build_apk, build_aab]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Send initial status to Telegram
      - name: Send status: Starting build
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Starting build..."

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: flutter-sdk-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            flutter-sdk-${{ runner.os }}-

      # Send status: Flutter SDK cached
      - name: Send status: Flutter SDK cached
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Flutter SDK cached."

      # Setup Flutter environment
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.22.0

      # Send status: Flutter setup complete
      - name: Send status: Flutter setup complete
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Flutter setup complete."

      # Cache Android SDK
      - name: Cache Android SDK
        uses: actions/cache@v3
        with:
          path: ~/.android
          key: android-sdk-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      # Send status: Android SDK cached
      - name: Send status: Android SDK cached
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Android SDK cached."

      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 34
          target: default
          arch: x86_64
          ndk: true

      # Send status: Android SDK setup complete
      - name: Send status: Android SDK setup complete
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Android SDK setup complete."

      # Cache Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('android/build.gradle') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Send status: Gradle cached
      - name: Send status: Gradle cached
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Gradle cached."

      # Cache Flutter build files
      - name: Cache Flutter build files
        uses: actions/cache@v3
        with:
          path: build/
          key: flutter-build-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            flutter-build-${{ runner.os }}-

      # Send status: Flutter build files cached
      - name: Send status: Flutter build files cached
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Flutter build files cached."

      # Cache Flutter pub dependencies
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            pubspec.lock
          key: pub-cache-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      # Send status: Flutter pub dependencies cached
      - name: Send status: Flutter pub dependencies cached
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Flutter pub dependencies cached."

      # Install Android build-tools including zipalign
      - name: Install Android build-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y android-sdk build-essential
          sdkmanager "build-tools;30.0.3"

      # Send status: Android build-tools installed
      - name: Send status: Android build-tools installed
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Android build-tools installed."

      # Get dependencies (skip cleaning cache to reuse cached files)
      - name: Get dependencies
        run: flutter pub get

      # Send status: Dependencies installed
      - name: Send status: Dependencies installed
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Dependencies installed."

      # Build based on event type (APK or AAB)
      - name: Build APK or AAB
        run: |
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            flutter build apk --release --split-per-abi
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            flutter build appbundle --release
          fi

      # Send status: Build complete
      - name: Send status: Build complete
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: Build complete. Signing APK/AAB..."

      # Decode keystore
      - name: Decode keystore
        env:
          KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        run: |
          echo "$KEYSTORE_FILE_BASE64" | base64 --decode > android/app/keystore.jks

      # Sign APK or AAB
      - name: Sign APK or AAB
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            for APK in build/app/outputs/apk/release/*.apk; do
              jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" "$APK" "$KEY_ALIAS"
            done
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            jarsigner -verbose -keystore android/app/keystore.jks -storepass "$KEYSTORE_PASSWORD" -keypass "$KEY_PASSWORD" build/app/outputs/bundle/release/app-release.aab "$KEY_ALIAS"
          fi

      # Send status: APK/AAB signed
      - name: Send status: APK/AAB signed
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: APK/AAB signed. Performing alignment..."

      # Align APK
      - name: Zipalign APK (if APK is built)
        if: github.event.action == 'build_apk'
        run: |
          for APK in build/app/outputs/apk/release/*.apk; do
            zipalign -v 4 "$APK" "$APK-aligned.apk"
            mv "$APK-aligned.apk" "$APK"
          done

      # Send status: APK aligned
      - name: Send status: APK aligned
        if: github.event.action == 'build_apk'
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: APK aligned."

      # Send APK or AAB to Telegram
      - name: Send APK or AAB to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: |
          CHAT_ID=${{ github.event.client_payload.chat_id }}  
          
          if [ "${{ github.event.action }}" == "build_apk" ]; then
            for APK in build/app/outputs/apk/release/*.apk; do
              curl -F chat_id=$CHAT_ID -F document=@"$APK" -F caption="MediaVerse APK" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument
            done
          elif [ "${{ github.event.action }}" == "build_aab" ]; then
            curl -F chat_id=$CHAT_ID -F document=@"build/app/outputs/bundle/release/app-release.aab" -F caption="MediaVerse AAB" https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument

      # Send status: APK/AAB uploaded
      - name: Send status: APK/AAB uploaded
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/editMessageText \
          -d chat_id=${{ github.event.client_payload.chat_id }} \
          -d message_id=${{ github.event.client_payload.message_id }} \
          -d text="Status: APK/AAB uploaded successfully!"
